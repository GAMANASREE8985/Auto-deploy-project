name: CI 

# Triggers - push to main and manual
on:
  push:
    branches: [ main ]
  workflow_dispatch:

# Global env - update BASE_DIR to match your repo layout
env:
  NODE_VERSION: 18
  BASE_DIR: 2025-26/Capstone_Project/auto-deploy-project

permissions:
  contents: read
  packages: write
  id-token: write

concurrency:
  group: ci-cd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci-build:
    name: Run unit tests and build artifacts
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Show repo layout (debug)
        run: |
          echo "WORKDIR: $(pwd)"
          echo "BASE_DIR -> ${BASE_DIR}"
          ls -la
          if [ -d "${BASE_DIR}" ]; then
            echo "BASE_DIR exists:"
            ls -la "${BASE_DIR}"
          else
            echo "WARNING: BASE_DIR does not exist - check path"
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Backend cache + tests
      - name: Cache backend node modules
        uses: actions/cache@v4
        with:
          path: ${{ env.BASE_DIR }}/backend/node_modules
          key: ${{ runner.os }}-backend-node-${{ hashFiles(format('{0}/backend/package-lock.json', env.BASE_DIR)) }}
          restore-keys: |
            ${{ runner.os }}-backend-node-

      - name: Backend - Install & Test
        working-directory: ${{ env.BASE_DIR }}/backend
        run: |
          echo "Running backend install/test..."
          npm ci
          npm test || true   # keep job alive if you want to collect reports; change as needed

      # Frontend cache + tests
      - name: Cache frontend node modules
        uses: actions/cache@v4
        with:
          path: ${{ env.BASE_DIR }}/frontend/node_modules
          key: ${{ runner.os }}-frontend-node-${{ hashFiles(format('{0}/frontend/package-lock.json', env.BASE_DIR)) }}
          restore-keys: |
            ${{ runner.os }}-frontend-node-

      - name: Frontend - Install & Test
        working-directory: ${{ env.BASE_DIR }}/frontend
        run: |
          echo "Running frontend install/test..."
          npm ci
          npm test --watchAll=false || true

      - name: Build frontend production bundle (if exists)
        working-directory: ${{ env.BASE_DIR }}/frontend
        run: |
          if grep -q "\"build\"" package.json; then
            npm run build
          else
            echo "No build script found for frontend."
          fi

  docker-and-scan:
    name: Build Docker images, push to Docker Hub, and run Trivy scans
    needs: ci-build
    runs-on: ubuntu-latest
    env:
      BASE_DIR: ${{ env.BASE_DIR }}
      DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU (optional multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Debug DockerHub user (do not expose in public logs)
        run: |
          # print markers to detect leading/trailing spaces or slashes
          printf 'DOCKERHUB_USER ->%s<-\n' "${{ secrets.DOCKERHUB_USER }}"

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.BASE_DIR }}/backend
          file: ${{ env.BASE_DIR }}/backend/Dockerfile
          push: true
          # sanitize DOCKERHUB_USER: remove any starting slash (should be fixed in secrets)
          tags: |
            ${{ secrets.DOCKERHUB_USER }}/auto-deploy-backend:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USER }}/auto-deploy-backend:latest

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.BASE_DIR }}/frontend
          file: ${{ env.BASE_DIR }}/frontend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USER }}/auto-deploy-frontend:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USER }}/auto-deploy-frontend:latest

      - name: Install Trivy
        run: |
          curl -sSfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: Trivy scan: backend (CRITICAL,HIGH)
        run: |
          echo "Scanning backend image..."
          trivy image --severity CRITICAL,HIGH ${{ secrets.DOCKERHUB_USER }}/auto-deploy-backend:${{ github.sha }} || true

      - name: Trivy scan: frontend (CRITICAL,HIGH)
        run: |
          echo "Scanning frontend image..."
          trivy image --severity CRITICAL,HIGH ${{ secrets.DOCKERHUB_USER }}/auto-deploy-frontend:${{ github.sha }} || true

  sonar-scan:
    name: SonarQube scan (placeholder)
    needs: ci-build
    runs-on: ubuntu-latest
    if: ${{ secrets.SONAR_TOKEN != '' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Sonar scanner (customize)
        run: |
          echo "Configure Sonar scanner (sonar-scanner CLI or github action) here."
