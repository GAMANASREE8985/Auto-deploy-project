name: CI - Build, Test, Lint, Docker, Scan

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: 18
  BASE_DIR: 2025-26/Capstone_Project/auto-deploy-project

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Show repo layout (debug)
        run: |
          echo "Workspace: $GITHUB_WORKSPACE"
          pwd
          ls -la
          echo "BASE_DIR = ${{ env.BASE_DIR }}"
          ls -la "${{ env.BASE_DIR }}" || true

      # ----------------------------
      # Backend: install, test
      # ----------------------------
      - name: Set up Node (for backend tests)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache backend node modules
        uses: actions/cache@v4
        with:
          path: ${{ env.BASE_DIR }}/backend/node_modules
          key: ${{ runner.os }}-backend-node-${{ hashFiles(format('{0}/backend/package-lock.json', env.BASE_DIR)) }}
          restore-keys: |
            ${{ runner.os }}-backend-node-

      - name: Backend - Install & Test
        working-directory: ${{ env.BASE_DIR }}/backend
        run: |
          echo "=== Backend: $(pwd) ==="
          npm ci
          npm test || true

      # ----------------------------
      # Frontend: install, lint, test
      # ----------------------------
      - name: Cache frontend node modules
        uses: actions/cache@v4
        with:
          path: ${{ env.BASE_DIR }}/frontend/node_modules
          key: ${{ runner.os }}-frontend-node-${{ hashFiles(format('{0}/frontend/package-lock.json', env.BASE_DIR)) }}
          restore-keys: |
            ${{ runner.os }}-frontend-node-

      - name: Frontend - Install dependencies
        working-directory: ${{ env.BASE_DIR }}/frontend
        run: |
          echo "=== Frontend: $(pwd) ==="
          npm ci

      - name: Frontend - Static Analysis (ESLint)
        working-directory: ${{ env.BASE_DIR }}/frontend
        run: |
          # ensure eslint is installed (project may already have it)
          npm install --no-audit --no-fund --save-dev eslint || true
          # run eslint on src; do not fail workflow by default (remove "|| true" to fail)
          npx eslint src --ext .js,.jsx || true

      - name: Frontend - Run Jest tests
        working-directory: ${{ env.BASE_DIR }}/frontend
        run: |
          npm test --watchAll=false || true

      # ----------------------------
      # Docker buildx + login
      # ----------------------------
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Determine short SHA
        id: vars
        run: |
          SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)
          echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT

      # ----------------------------
      # Build and push backend image
      # ----------------------------
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.BASE_DIR }}/backend
          file: ${{ env.BASE_DIR }}/backend/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKERHUB_USER }}/auto-deploy-backend:${{ steps.vars.outputs.short_sha }}
            ${{ env.DOCKERHUB_USER }}/auto-deploy-backend:latest

      # ----------------------------
      # Build and push frontend image
      # ----------------------------
      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.BASE_DIR }}/frontend
          file: ${{ env.BASE_DIR }}/frontend/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKERHUB_USER }}/auto-deploy-frontend:${{ steps.vars.outputs.short_sha }}
            ${{ env.DOCKERHUB_USER }}/auto-deploy-frontend:latest

      # ----------------------------
      # Security scanning with Trivy
      # ----------------------------
      - name: Install Trivy
        run: |
          curl -sSfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: Trivy scan pushed backend image (CRITICAL,HIGH)
        run: |
          trivy image --severity CRITICAL,HIGH ${{ env.DOCKERHUB_USER }}/auto-deploy-backend:${{ steps.vars.outputs.short_sha }} || true

      - name: Trivy scan pushed frontend image (CRITICAL,HIGH)
        run: |
          trivy image --severity CRITICAL,HIGH ${{ env.DOCKERHUB_USER }}/auto-deploy-frontend:${{ steps.vars.outputs.short_sha }} || true

      # ----------------------------
      # Optional SonarQube scan (placeholder)
      # ----------------------------
      - name: SonarQube scan (placeholder)
        if: ${{ secrets.SONAR_TOKEN != '' }}
        run: |
          echo "Add Sonar scanner invocation here (SONAR_TOKEN provided)."

      - name: Done
        run: echo "CI pipeline finished."
