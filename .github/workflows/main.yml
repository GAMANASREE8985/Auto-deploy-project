name: CI

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: 18
  BASE_DIR: 2025-26/Capstone_Project/auto-deploy-project

jobs:
  build:
    runs-on: ubuntu-latest

    # Resolve image user with fallback to github.actor if secret not provided
    env:
      IMAGE_USER: ${{ secrets.DOCKERHUB_USER || github.actor }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      NODE_VERSION: ${{ env.NODE_VERSION }}
      BASE_DIR: ${{ env.BASE_DIR }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Show repo layout (debug)
        run: |
          pwd
          ls -la
          echo "BASE_DIR=${BASE_DIR}"
          ls -la "${BASE_DIR}"

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache backend node modules
        uses: actions/cache@v4
        with:
          path: ${{ env.BASE_DIR }}/backend/node_modules
          key: ${{ runner.os }}-backend-node-${{ hashFiles(format('{0}/backend/package-lock.json', env.BASE_DIR)) }}
          restore-keys: |
            ${{ runner.os }}-backend-node-

      - name: Backend - Install & Test
        working-directory: ${{ env.BASE_DIR }}/backend
        run: |
          npm ci
          npm test

      - name: Cache frontend node modules
        uses: actions/cache@v4
        with:
          path: ${{ env.BASE_DIR }}/frontend/node_modules
          key: ${{ runner.os }}-frontend-node-${{ hashFiles(format('{0}/frontend/package-lock.json', env.BASE_DIR)) }}
          restore-keys: |
            ${{ runner.os }}-frontend-node-

      - name: Frontend - Install & Test
        working-directory: ${{ env.BASE_DIR }}/frontend
        run: |
          npm ci
          npm test --watchAll=false

      - name: Ensure DockerHub token present
        run: |
          if [ -z "$DOCKERHUB_TOKEN" ]; then
            echo "ERROR: DOCKERHUB_TOKEN secret is not set. Add repository secret DOCKERHUB_TOKEN and try again."
            exit 1
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Debug - show resolved image tags
        run: |
          echo "Backend tag: ${IMAGE_USER}/auto-deploy-backend:${GITHUB_SHA}"
          echo "Frontend tag: ${IMAGE_USER}/auto-deploy-frontend:${GITHUB_SHA}"
        env:
          IMAGE_USER: ${{ env.IMAGE_USER }}
          GITHUB_SHA: ${{ github.sha }}

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ env.IMAGE_USER }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.BASE_DIR }}/backend
          file: ${{ env.BASE_DIR }}/backend/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_USER }}/auto-deploy-backend:latest
            ${{ env.IMAGE_USER }}/auto-deploy-backend:${{ github.sha }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.BASE_DIR }}/frontend
          file: ${{ env.BASE_DIR }}/frontend/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_USER }}/auto-deploy-frontend:latest
            ${{ env.IMAGE_USER }}/auto-deploy-frontend:${{ github.sha }}

      - name: Install Trivy
        run: |
          curl -sSfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: Trivy scan pushed backend image (CRITICAL,HIGH)
        run: |
          trivy image --severity CRITICAL,HIGH ${{ env.IMAGE_USER }}/auto-deploy-backend:${{ github.sha }} || true

      - name: Trivy scan pushed frontend image (CRITICAL,HIGH)
        run: |
          trivy image --severity CRITICAL,HIGH ${{ env.IMAGE_USER }}/auto-deploy-frontend:${{ github.sha }} || true

      - name: SonarQube scan (placeholder)
        if: ${{ secrets.SONAR_TOKEN != '' }}
        run: |
          echo "Customize Sonar scanner here"
