name: CI

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  NODE_VERSION: 18
  BASE_DIR: 2025-26/Capstone_Project/auto-deploy-project

permissions:
  contents: read
  packages: write
  id-token: write

concurrency:
  group: ci-cd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Show repo layout (debug)
        run: |
          echo "PWD: $(pwd)"
          echo "BASE_DIR = ${BASE_DIR}"
          echo "Listing repo root:"
          ls -la
          echo "Listing BASE_DIR:"
          ls -la 2025-26/Capstone_Project/auto-deploy-project || true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # -------------------------
      # BACKEND BUILD + TEST
      # -------------------------
      - name: Cache backend node modules
        uses: actions/cache@v4
        with:
          path: 2025-26/Capstone_Project/auto-deploy-project/backend/node_modules
          key: ${{ runner.os }}-backend-node-${{ hashFiles('2025-26/Capstone_Project/auto-deploy-project/backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-backend-node-

      - name: Backend - Install & Test
        working-directory: 2025-26/Capstone_Project/auto-deploy-project/backend
        run: |
          echo "Installing backend dependencies..."
          npm ci
          echo "Running backend tests..."
          npm test || true

      # -------------------------
      # FRONTEND BUILD + TEST
      # -------------------------
      - name: Cache frontend node modules
        uses: actions/cache@v4
        with:
          path: 2025-26/Capstone_Project/auto-deploy-project/frontend/node_modules
          key: ${{ runner.os }}-frontend-node-${{ hashFiles('2025-26/Capstone_Project/auto-deploy-project/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-node-

      - name: Frontend - Install & Test
        working-directory: 2025-26/Capstone_Project/auto-deploy-project/frontend
        run: |
          echo "Installing frontend dependencies..."
          npm ci
          echo "Running frontend tests..."
          npm test --watchAll=false || true

      - name: Build frontend production bundle (if exists)
        working-directory: 2025-26/Capstone_Project/auto-deploy-project/frontend
        run: |
          if grep -q "\"build\"" package.json 2>/dev/null; then
            npm run build
          else
            echo "No build script found for frontend."
          fi

  docker_and_scan:
    name: Build & Push Docker Images + Security Scan
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Sanitize DockerHub username
        id: sanitize_user
        run: |
          raw="${{ secrets.DOCKERHUB_USER }}"
          raw="$(echo -n "$raw" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')"
          sanitized="$(echo -n "$raw" | tr -d '/')"
          if [ -z "$sanitized" ]; then
            echo "ERROR: DockerHub username empty! Check DOCKERHUB_USER secret."
            exit 1
          fi
          echo "sanitized=$sanitized" >> "$GITHUB_OUTPUT"

      - name: Debug sanitized username
        run: echo "DockerHub sanitized username -> ${{ steps.sanitize_user.outputs.sanitized }}"

      - name: Set up QEMU (multi-arch support)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # -------------------------
      # BACKEND DOCKER BUILD
      # -------------------------
      - name: Ensure backend Dockerfile exists
        run: |
          if [ ! -f "${{ env.BASE_DIR }}/backend/Dockerfile" ]; then
            echo "::error ::Backend Dockerfile missing!"
            ls -la "${{ env.BASE_DIR }}/backend" || true
            exit 1
          fi

      - name: Build and push backend Docker image
        uses: docker/build-push-action@v4
        with:
          context: 2025-26/Capstone_Project/auto-deploy-project/backend
          file: 2025-26/Capstone_Project/auto-deploy-project/backend/Dockerfile
          push: true
          tags: |
            ${{ steps.sanitize_user.outputs.sanitized }}/auto-deploy-backend:${{ github.sha }}
            ${{ steps.sanitize_user.outputs.sanitized }}/auto-deploy-backend:latest

      # -------------------------
      # FRONTEND DOCKER BUILD
      # -------------------------
      - name: Ensure frontend Dockerfile exists
        run: |
          if [ ! -f "${{ env.BASE_DIR }}/frontend/Dockerfile" ]; then
            echo "::error ::Frontend Dockerfile missing!"
            ls -la "${{ env.BASE_DIR }}/frontend" || true
            exit 1
          fi

      # ðŸ”§ CRITICAL FIX FOR GITHUB ACTIONS (Safe for Jenkins)
      - name: Fix permissions before building frontend image
        run: |
          echo "Fixing permissions for frontend source and node_modules..."
          chmod -R 777 2025-26/Capstone_Project/auto-deploy-project/frontend || true
          chmod -R 777 2025-26/Capstone_Project/auto-deploy-project/frontend/node_modules/.bin || true
          echo "Permissions fixed successfully."

      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v4
        with:
          context: 2025-26/Capstone_Project/auto-deploy-project/frontend
          file: 2025-26/Capstone_Project/auto-deploy-project/frontend/Dockerfile
          push: true
          tags: |
            ${{ steps.sanitize_user.outputs.sanitized }}/auto-deploy-frontend:${{ github.sha }}
            ${{ steps.sanitize_user.outputs.sanitized }}/auto-deploy-frontend:latest

      # -------------------------
      # SECURITY SCANS
      # -------------------------
      - name: Install Trivy (security scanner)
        run: |
          curl -sSfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: Trivy scan backend (CRITICAL,HIGH)
        run: |
          trivy image --severity CRITICAL,HIGH ${{ steps.sanitize_user.outputs.sanitized }}/auto-deploy-backend:${{ github.sha }} || true

      - name: Trivy scan frontend (CRITICAL,HIGH)
        run: |
          trivy image --severity CRITICAL,HIGH ${{ steps.sanitize_user.outputs.sanitized }}/auto-deploy-frontend:${{ github.sha }} || true
