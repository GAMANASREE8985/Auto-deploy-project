pipeline {
  agent any
  environment {
    // Set the registry prefix (where images will be pushed)
    // For Docker Hub under your user: docker.io/220030228
    DOCKER_REG = "docker.io/220030228"
  }
  stages {
    stage('Checkout') { steps { checkout scm } }

    stage('Backend Install & Test') {
      steps {
        dir('backend') {
          sh '''
            if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
              echo "Using npm ci"
              npm ci
            else
              echo "No lockfile, using npm install"
              npm install
            fi
            npm test || true
          '''
        }
      }
    }

    stage('Frontend Install & Test') {
      steps {
        dir('frontend') {
          sh '''
            if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
              echo "Using npm ci"
              npm ci
            else
              echo "No lockfile, using npm install"
              npm install
            fi
            npm test --watchAll=false || true
          '''
        }
      }
    }

    stage('Build Docker Images') {
      steps {
        script {
          // choose a tag for images (GIT_COMMIT if present, else short commit)
          env.IMAGE_TAG = env.GIT_COMMIT ?: sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
        }
        sh '''
          set -eux
          docker build -t ${DOCKER_REG}/auto-deploy-backend:${IMAGE_TAG} ./backend
          docker build -t ${DOCKER_REG}/auto-deploy-frontend:${IMAGE_TAG} ./frontend
        '''
      }
    }

    stage('Push Images') {
      steps {
        script {
          // get registry host, e.g., "docker.io"
          env.DOCKER_REG_HOST = sh(script: 'echo "${DOCKER_REG}" | awk -F"/" \'{print $1}\'', returnStdout: true).trim()
        }
        // Use the username/password credential you created (ID = docker-cred)
        withCredentials([usernamePassword(credentialsId: 'docker-cred', usernameVariable: 'DOCKER_REG_USR', passwordVariable: 'DOCKER_REG_PSW')]) {
          sh '''
            set -eux
            echo "Logging in to ${DOCKER_REG_HOST}"
            echo "$DOCKER_REG_PSW" | docker login --username "$DOCKER_REG_USR" --password-stdin ${DOCKER_REG_HOST}
            docker push ${DOCKER_REG}/auto-deploy-backend:${IMAGE_TAG}
            docker push ${DOCKER_REG}/auto-deploy-frontend:${IMAGE_TAG}
          '''
        }
      }
    }

    stage('Deploy to K8s') {
      steps {
        sh '''
          set -eux
          kubectl set image deployment/backend backend=${DOCKER_REG}/auto-deploy-backend:${IMAGE_TAG} -n auto-deploy || true
          kubectl set image deployment/frontend frontend=${DOCKER_REG}/auto-deploy-frontend:${IMAGE_TAG} -n auto-deploy || true
        '''
      }
    }
  }

  post {
    failure { echo 'Build failed - notify team' }
  }
}
