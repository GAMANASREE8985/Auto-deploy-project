pipeline {
  agent any
  environment {
    DOCKER_REG = "docker.io/220030228"
  }
  stages {
    stage('Checkout') { steps { checkout scm } }

    stage('Backend Install & Test') {
      steps {
        dir('backend') {
          sh '''
            if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
              npm ci
            else
              npm install
            fi
            npm test || true
          '''
        }
      }
    }

    stage('Frontend Install & Test') {
      steps {
        dir('frontend') {
          sh '''
            if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
              npm ci
            else
              npm install
            fi
            npm test --watchAll=false || true
          '''
        }
      }
    }

    stage('Build Docker Images') {
      steps {
        script { env.IMAGE_TAG = env.GIT_COMMIT ?: sh(script: "git rev-parse --short HEAD", returnStdout: true).trim() }
        sh '''
          set -eux
          docker build -t ${DOCKER_REG}/auto-deploy-backend:${IMAGE_TAG} ./backend
          docker build -t ${DOCKER_REG}/auto-deploy-frontend:${IMAGE_TAG} ./frontend
        '''
      }
    }

    stage('Push Images') {
      steps {
        script { env.DOCKER_REG_HOST = sh(script: 'echo "${DOCKER_REG}" | cut -d"/" -f1', returnStdout: true).trim() }
        withCredentials([usernamePassword(credentialsId: 'docker-cred', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PSW')]) {
          sh '''
            set -eux
            echo "$DOCKER_PSW" | docker login --username "$DOCKER_USER" --password-stdin ${DOCKER_REG_HOST}
            docker push ${DOCKER_REG}/auto-deploy-backend:${IMAGE_TAG}
            docker push ${DOCKER_REG}/auto-deploy-frontend:${IMAGE_TAG}
          '''
        }
      }
    }

    stage('Deploy to K8s') {
      steps {
        sh '''
          set -eux
          kubectl set image deployment/backend backend=${DOCKER_REG}/auto-deploy-backend:${IMAGE_TAG} -n auto-deploy || true
          kubectl set image deployment/frontend frontend=${DOCKER_REG}/auto-deploy-frontend:${IMAGE_TAG} -n auto-deploy || true
        '''
      }
    }
  }
  post { failure { echo 'Build failed - notify team' } }
}
